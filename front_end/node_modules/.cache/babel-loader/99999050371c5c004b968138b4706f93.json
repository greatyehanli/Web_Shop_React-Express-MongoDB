{"ast":null,"code":"import * as constants from '../constants/cart';\nconst initState = {\n  itemsInCart: []\n}; //这个函数必须是纯函数, 参数值不能改, 返回值要是一个最新的引用地址, 由参数计算/拼凑得到\n\nexport default function CartReducer(preState = initState, action) {\n  const {\n    type,\n    data\n  } = action;\n\n  switch (type) {\n    case constants.SAVE_TO_CART:\n      const doesItemExists = preState.itemsInCart.find(item => item.id === data.id);\n\n      if (doesItemExists) {\n        return { // 目前只有一个itemArrInCart在里面, 我们以后可能加更多的properties,在这里先展开\n          ...preState,\n          //cartItem里面存了当前item的Qauntity, 这里更新到数组里面的最新data包含了最新当前item的选择数量\n          itemsInCart: preState.itemsInCart.map(currentItem => {\n            //对匹配上的cartItem进行数据更新, 老的不变, 原路返回\n            return currentItem.id === data.id ? data : currentItem;\n          })\n        };\n      }\n\n      return { ...preState,\n        // 如果是新加的item, 把它直接push到数组最后\n        //返回值是一个新的内存引用地址\n        itemsInCart: [...preState, data]\n      };\n\n    case constants.DELETE_FROM_CART:\n      return;\n\n    case constants.RESET_CART:\n      return { ...preState,\n        itemsInCart: preState.itemsInCart.filter()\n      };\n\n    default:\n      return preState;\n  }\n}\n_c = CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/Users/liyehan/Desktop/MyProject/front_end/src/redux/reducers/cart.js"],"names":["constants","initState","itemsInCart","CartReducer","preState","action","type","data","SAVE_TO_CART","doesItemExists","find","item","id","map","currentItem","DELETE_FROM_CART","RESET_CART","filter"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,mBAA3B;AAEA,MAAMC,SAAS,GAAG;AAACC,EAAAA,WAAW,EAAE;AAAd,CAAlB,C,CAEA;;AACA,eAAe,SAASC,WAAT,CAAqBC,QAAQ,GAACH,SAA9B,EAAyCI,MAAzC,EAAgD;AAC3D,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAeF,MAArB;;AAEA,UAAQC,IAAR;AACI,SAAKN,SAAS,CAACQ,YAAf;AAEI,YAAMC,cAAc,GAAGL,QAAQ,CAACF,WAAT,CAAqBQ,IAArB,CAA0BC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,IAAI,CAACK,EAAnD,CAAvB;;AAEA,UAAGH,cAAH,EAAkB;AACd,eAAM,EACF;AACA,aAAGL,QAFD;AAGF;AACAF,UAAAA,WAAW,EAAEE,QAAQ,CAACF,WAAT,CAAqBW,GAArB,CAAyBC,WAAW,IAAI;AACjD;AACA,mBAAOA,WAAW,CAACF,EAAZ,KAAmBL,IAAI,CAACK,EAAxB,GAA6BL,IAA7B,GAAoCO,WAA3C;AACH,WAHY;AAJX,SAAN;AASH;;AAED,aAAO,EACH,GAAGV,QADA;AAEH;AACA;AACAF,QAAAA,WAAW,EAAE,CAAC,GAAGE,QAAJ,EAAcG,IAAd;AAJV,OAAP;;AAOJ,SAAKP,SAAS,CAACe,gBAAf;AAEI;;AAEJ,SAAKf,SAAS,CAACgB,UAAf;AAEI,aAAO,EACH,GAAGZ,QADA;AAEHF,QAAAA,WAAW,EAAEE,QAAQ,CAACF,WAAT,CAAqBe,MAArB;AAFV,OAAP;;AAKJ;AACI,aAAOb,QAAP;AApCR;AAsCH;KAzCuBD,W","sourcesContent":["import * as constants from '../constants/cart'\n\nconst initState = {itemsInCart: []}\n\n//这个函数必须是纯函数, 参数值不能改, 返回值要是一个最新的引用地址, 由参数计算/拼凑得到\nexport default function CartReducer(preState=initState, action){\n    const {type, data} = action\n\n    switch (type) {\n        case constants.SAVE_TO_CART:\n\n            const doesItemExists = preState.itemsInCart.find(item => item.id === data.id)\n\n            if(doesItemExists){\n                return{\n                    // 目前只有一个itemArrInCart在里面, 我们以后可能加更多的properties,在这里先展开\n                    ...preState,\n                    //cartItem里面存了当前item的Qauntity, 这里更新到数组里面的最新data包含了最新当前item的选择数量\n                    itemsInCart: preState.itemsInCart.map(currentItem => {\n                        //对匹配上的cartItem进行数据更新, 老的不变, 原路返回\n                        return currentItem.id === data.id ? data : currentItem\n                    })\n                }\n            }\n\n            return {\n                ...preState,\n                // 如果是新加的item, 把它直接push到数组最后\n                //返回值是一个新的内存引用地址\n                itemsInCart: [...preState, data]\n            };\n\n        case constants.DELETE_FROM_CART:\n            \n            return ;\n\n        case constants.RESET_CART:\n            \n            return {\n                ...preState,\n                itemsInCart: preState.itemsInCart.filter()\n            };\n    \n        default:\n            return preState;\n    }\n}"]},"metadata":{},"sourceType":"module"}